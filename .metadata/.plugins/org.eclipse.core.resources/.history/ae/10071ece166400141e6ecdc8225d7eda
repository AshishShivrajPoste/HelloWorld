package com.edu.queue.adt;

public class UnboundedQueueLinklist<T> implements UnboundedQueue<T> {

	private Node<T> front,rear;
	private int totalNodes;

	public UnboundedQueueLinklist(){
		front = null;
		rear = null;
		totalNodes = 0;
	}
	@Override
	public void enQueue(T element) {
		Node current = rear;
		rear = new Node();
		rear.setItemData(element);
		if(totalNodes == 0){
			front = rear;
		}else{
			current.setNext(rear);
		}
		totalNodes++;
	}

	@Override
	public T deQueue() {
		if(isEmpty()){
			System.out.println("Empty Queue!!!");
			return null;
		}
		T element = (T) front.getItemData();
		front = front.getNext();
		totalNodes--;
		if(isEmpty()){
			rear = null;
		}
		return element;

	}

	@Override
	public Boolean isEmpty() {
		if(totalNodes == 0){
			return true;
		}
		return false;
	}
	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		Node<T> tmp = front;
		while (tmp != null) {
			sb.append(tmp.getItemData()).append("->");
			tmp = tmp.getNext();
		}
		return sb.toString();
	}

}
