package com.ms.edu.linklist;

public class Palindrome {
	public Boolean isPalindrome(Node head){	
		Node slowLinklistPtr = head;
		Node fastLinklistPtr = head;
		Node prev_of_slow_ptr = head;
		Node startNode = head;
		Node midNode = null;
		middleLinklistNode(slowLinklistPtr,fastLinklistPtr,prev_of_slow_ptr);
		if (fastLinklistPtr != null)
        {
			midNode = slowLinklistPtr;
			slowLinklistPtr = slowLinklistPtr.getLink();
        }
		Node second_half = slowLinklistPtr;
		Node lastNode = reverseLinklist(middleNode);
		while(startNode!=null || lastNode!=null){
			if(startNode.getData()!=lastNode.getData()){
				return false;
			}
			startNode = startNode.getLink();
			lastNode = lastNode.getLink();
		}
		return true;
	}
	public Node reverseLinklist(Node node){
		Node prev = null;
		Node current = node;
		Node next = null;
		while(current != null){
			next = current.getLink();
			current.setLink(prev);
			prev = current;
			current = next;
		}
		return prev;
	}
	public Node middleLinklistNode(Node slowLinklistPtr,Node fastLinklistPtr,Node prev_of_slow_ptr){
		while(fastLinklistPtr.getLink()!=null && fastLinklistPtr!=null){
			slowLinklistPtr = slowLinklistPtr.getLink();
			prev_of_slow_ptr = slowLinklistPtr;
			fastLinklistPtr = fastLinklistPtr.getLink().getLink();
		}
		return slowLinklistPtr;
	}
}
